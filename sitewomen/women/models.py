from django.db import models

class Women(models.Model):
  title = models.CharField(max_length=255)
  content = models.TextField(blank=True)
  time_create = models.DateTimeField(auto_now_add=True)
  time_update = models.DateTimeField(auto_now=True)
  is_published = models.BooleanField(default=True)

  def __str__(self):
    return self.title

'''
!По умолчанию все запросы к базе данных являются ленивыми

Запросы на создание записи:
--------------------------------------------------------
Women(title="Анджелина Джоли", content="Биография Анджелины Джоли") - создает лишь экземпляр модели, но не добавляет его базу данных
--------------------------------------------------------
w = Women(title="Анджелина Джоли", content="Биография Анджелины Джоли") - создаем экземпляр, присваиваем переменной w
w.save() - сохраняем экземпляр в базе данных
--------------------------------------------------------
Women.objects.create(title='Ума Турман', content='Биография Умы Турман') - позволяет сразу создать эклемпляр класса и сохранить его в базу данных
--------------------------------------------------------
Women.objects.all() - возвращает все записи с модели базы данных в формате списка QuerySet
Пример:
<QuerySet [<Women: Women object (1)>]>
--------------------------------------------------------
Women.objects.all() - возвращает все записи с модели базы данных в формате списка QuerySet
Пример:
<QuerySet [<Women: Women object (1)>]>
--------------------------------------------------------
Women.objects.all()[0] - получить только первую записи из списка
Пример:
<Women: Анджелина Джоли>
--------------------------------------------------------
Women.objects.all()[:3] - получить список из первых 3 записей
Пример:
<QuerySet [<Women: Анджелина Джоли>, <Women: Энн Хэтэуей>, <Women: Джулия Робертс>]>
--------------------------------------------------------
Women.objects.filter(title='Энн Хэтэуей') - получить записи соответствующие условию
Пример:
<QuerySet [<Women: Энн Хэтэуей>]>
--------------------------------------------------------
Women.objects.exclude(pk=2) - получить записи КРОМЕ той у которого id=2
Пример:
<QuerySet [<Women: Анджелина Джоли>, <Women: Джулия Робертс>, <Women: Ума Турман>, <Women: Кира Найтли>]>
--------------------------------------------------------
Women.objects.get(pk=2) - получить одну запись по условию (если не найдет вернет ошибку DoesNotExist)
Пример:
<Women: Энн Хэтэуей>
'''

'''
! В методе filter при фильтрации можно к названию полей через двойное нижнее подчеркивание добавлять дополнительные условия

lookups в django:
--------------------------------------------------------
* <имя атрибута>__gte - сравнение больше или равно (>=)
Пример:
Women.objects.filter(pk__gte=2)
--------------------------------------------------------
* <имя атрибута>__gt - сравнение больше (>)
Пример:
Women.objects.filter(pk__gt=2)
--------------------------------------------------------
* <имя атрибута>__lte - сравнение меньше или равно (<=)
Пример:
Women.objects.filter(pk__gt=2)
--------------------------------------------------------
* <имя атрибута>__lt - сравнение меньше (<)
Пример:
Women.objects.filter(pk__lt=2)
--------------------------------------------------------
* <имя атрибута>__contains - атрибут должен включать в себя подстроку
Пример:
Women.objects.filter(pk__contains='ли')
--------------------------------------------------------
* <имя атрибута>__icontains - атрибут должен включать в себя подстроку без учета регистра (база данных sqlite не поддерживает)
Пример:
Women.objects.filter(pk__icontains='ли')
--------------------------------------------------------
* <имя атрибута>__in - атрибут должен быть равным одному из значений списка
Пример:
Women.objects.filter(pk__in=[1, 2, 3])
--------------------------------------------------------
'''