from django.db import models
from django.urls import reverse

class PublishedManager(models.Manager): # создание кастомного менеджера по типу models.OBJECTS
  def get_queryset(self): # метод отвечает за конечный базовый QuerySet, который можно уже в дальнейшем фильтровать, сортировать и т.д
    return super().get_queryset().filter(is_published=Women.Status.PUBLISHED)

class Women(models.Model):
  class Status(models.IntegerChoices):
    DRAFT = 0, 'Черновик'
    PUBLISHED = 1, 'Опубликовано'

  '''
  Women.Status.choices - позволяет получить список кортежей, возможных значений
  Пример:
  [(0, 'Черновик'), (1, 'Опубликовано')]
  --------------------------------------
  Women.Status.labels - получение метод
  Пример:
  ['Черновик', 'Опубликовано']
  --------------------------------------
  Women.Status.values - получение значений
  Пример:
  [0, 1]
  '''

  title = models.CharField(max_length=255)
  slug = models.SlugField(max_length=255, unique=True, db_index=True)
  content = models.TextField(blank=True)
  time_create = models.DateTimeField(auto_now_add=True)
  time_update = models.DateTimeField(auto_now=True)
  is_published = models.BooleanField(choices=Status.choices, default=Status.PUBLISHED)

  # При подключении своего собственного менеджера, менеджер objects становится недоступным
  published = PublishedManager()
  # Чтобы иметь возможность использовать оба менеджера нужно явно его указать еще и objects менеджер
  objects = models.Manager()

  def __str__(self):
    return self.title
  
  class Meta:
    ordering = ['-time_create'] # задает сортировку по умолчанию для QuerySet
    indexes = [
      models.Index(fields=['-time_create']) # задает индексирование поля time_create с учетом сортировки (т.к добавили символ "-")
    ]

  def get_absolute_url(self): # специальный метод, который может использовать admin панель для построения ссылок к конкретным записят модели
    return reverse('post', kwargs={'post_slug': self.slug})

'''
!По умолчанию все запросы к базе данных являются ленивыми

Запросы на создание записи:
--------------------------------------------------------
Women(title="Анджелина Джоли", content="Биография Анджелины Джоли") - создает лишь экземпляр модели, но не добавляет его базу данных
--------------------------------------------------------
w = Women(title="Анджелина Джоли", content="Биография Анджелины Джоли") - создаем экземпляр, присваиваем переменной w
w.save() - сохраняем экземпляр в базе данных
--------------------------------------------------------
Women.objects.create(title='Ума Турман', content='Биография Умы Турман') - позволяет сразу создать эклемпляр класса и сохранить его в базу данных
--------------------------------------------------------
Women.objects.all() - возвращает все записи с модели базы данных в формате списка QuerySet
Пример:
<QuerySet [<Women: Women object (1)>]>
--------------------------------------------------------
Women.objects.all() - возвращает все записи с модели базы данных в формате списка QuerySet
Пример:
<QuerySet [<Women: Women object (1)>]>
--------------------------------------------------------
Women.objects.all()[0] - получить только первую записи из списка
Пример:
<Women: Анджелина Джоли>
--------------------------------------------------------
Women.objects.all()[:3] - получить список из первых 3 записей
Пример:
<QuerySet [<Women: Анджелина Джоли>, <Women: Энн Хэтэуей>, <Women: Джулия Робертс>]>
--------------------------------------------------------
Women.objects.filter(title='Энн Хэтэуей') - получить записи соответствующие условию
Пример:
<QuerySet [<Women: Энн Хэтэуей>]>
--------------------------------------------------------
Women.objects.exclude(pk=2) - получить записи КРОМЕ той у которого id=2
Пример:
<QuerySet [<Women: Анджелина Джоли>, <Women: Джулия Робертс>, <Women: Ума Турман>, <Women: Кира Найтли>]>
--------------------------------------------------------
Women.objects.get(pk=2) - получить одну запись по условию (если не найдет вернет ошибку DoesNotExist)
Пример:
<Women: Энн Хэтэуей>
--------------------------------------------------------
Women.objects.order_by("title") - выводит все записи в виде списка и сортирует по полю "title" (в порядке убывания "ASC")
Пример:
<QuerySet [<Women: Анджелина Джоли>, <Women: Джулия Робертс>, <Women: Кира Найтли>, <Women: Ума Турман>, <Women: Энн Хэтэуей>]>
--------------------------------------------------------
Women.objects.order_by("-title") - выводит все записи в виде списка и сортирует по полю "title" (в порядке возрастания "DESC")
Пример:
<QuerySet [<Women: Энн Хэтэуей>, <Women: Ума Турман>, <Women: Кира Найтли>, <Women: Джулия Робертс>, <Women: Анджелина Джоли>]>
--------------------------------------------------------
Women.objects.all().update(is_published=0) - обновляет все записи в базе данных, каждой is_published ставит равной 0
Пример:
5 # пять записей были изменены, в бд всего пять записей было
! метод применяется только к QuerySet
! метод нельзя применять к срезам
Women.objects.get(...).update(...) - НЕДОПУСТИМО!!!
Women.objects.all()[:4].update(...) - НЕДОПУСТИМО!!!
Women.objects.filter(...).update(...) - так правильно
--------------------------------------------------------
Women.objects.get(pk=1).delete() - удаляет все записи из модели
Women.objects.get(...).delete(...) - НЕДОПУСТИМО!!!
Women.objects.all(...)[:3].delete(...) - НЕДОПУСТИМО!!!
Women.objects.filter(...).delete(...) - так правильно
Пример:
(1, {'women.Women': 1} # удалил 1 запись
--------------------------------------------------------
'''

'''
! В методе filter при фильтрации можно к названию полей через двойное нижнее подчеркивание добавлять дополнительные условия

lookups в django:
--------------------------------------------------------
* <имя атрибута>__gte - сравнение больше или равно (>=)
Пример:
Women.objects.filter(pk__gte=2)
--------------------------------------------------------
* <имя атрибута>__gt - сравнение больше (>)
Пример:
Women.objects.filter(pk__gt=2)
--------------------------------------------------------
* <имя атрибута>__lte - сравнение меньше или равно (<=)
Пример:
Women.objects.filter(pk__gt=2)
--------------------------------------------------------
* <имя атрибута>__lt - сравнение меньше (<)
Пример:
Women.objects.filter(pk__lt=2)
--------------------------------------------------------
* <имя атрибута>__contains - атрибут должен включать в себя подстроку
Пример:
Women.objects.filter(pk__contains='ли')
--------------------------------------------------------
* <имя атрибута>__icontains - атрибут должен включать в себя подстроку без учета регистра (база данных sqlite не поддерживает)
Пример:
Women.objects.filter(pk__icontains='ли')
--------------------------------------------------------
* <имя атрибута>__in - атрибут должен быть равным одному из значений списка
Пример:
Women.objects.filter(pk__in=[1, 2, 3])
--------------------------------------------------------
'''